{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";import _inherits from\"@babel/runtime/helpers/inherits\";import React,{Component}from'react';import View from\"react-native-web/dist/exports/View\";import Text from\"react-native-web/dist/exports/Text\";import Modal from\"react-native-web/dist/exports/Modal\";import ScrollView from\"react-native-web/dist/exports/ScrollView\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import TouchableOpacity from\"react-native-web/dist/exports/TouchableOpacity\";import{SQLite}from'expo-sqlite';var db=SQLite.openDatabase('db.db');var Sync_model=function(_Component){_inherits(Sync_model,_Component);function Sync_model(props){var _this;_classCallCheck(this,Sync_model);_this=_possibleConstructorReturn(this,_getPrototypeOf(Sync_model).call(this,props));_this.create_sync_array=function(){db.transaction(function(tx){tx.executeSql('SELECT * from events',[],function(tx,results){_this.create_sub_array(results.rows._array);});});};_this.create_sub_array=function _callee(data){var event_data,i,suppliers_data;return _regeneratorRuntime.async(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:event_data=[];i=0;case 2:if(!(i<data.length)){_context.next=11;break;}_context.next=5;return _regeneratorRuntime.awrap(_this.get_supplier_array(data[i]['event_id']));case 5:suppliers_data=_context.sent;data[i]['suppliers']=suppliers_data.supps;event_data.push(data[i]);case 8:i++;_context.next=2;break;case 11:console.log(event_data);case 12:case\"end\":return _context.stop();}}});};_this.get_supplier_array=function _callee2(event_id){var supps;return _regeneratorRuntime.async(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:supps=[];return _context2.abrupt(\"return\",new Promise(function(resolve,reject){db.transaction(function(tx){tx.executeSql('SELECT * from suppliers where event_id = ?',[event_id],function(_,_ref){var rows=_ref.rows;supps.push(rows._array);resolve({supps:supps});});},null,null);}));case 2:case\"end\":return _context2.stop();}}});};_this.state={data:'',supplier_array:[]};return _this;}_createClass(Sync_model,[{key:\"setModalVisible\",value:function setModalVisible(visible){this.props.sync_popup(visible);}},{key:\"render\",value:function render(){var _this2=this;return React.createElement(View,null,React.createElement(Modal,{animationType:\"slide\",transparent:false,visible:this.props.modalvisibility,onRequestClose:function onRequestClose(){_this2.setModalVisible(false);}},React.createElement(View,null,React.createElement(TouchableOpacity,{style:styles.startbutton,onPress:function onPress(){_this2.create_sync_array();}},React.createElement(Text,{style:{color:\"#fff\",fontSize:40}},\"Start\")),React.createElement(Text,null,console.log(this.state.data)))));}}]);return Sync_model;}(Component);export{Sync_model as default};var styles=StyleSheet.create({startbutton:{backgroundColor:'black',padding:10,width:200}});","map":{"version":3,"sources":["D:/Notes_app/Pages/modals/Sync_model.js"],"names":["React","Component","SQLite","db","openDatabase","Sync_model","props","create_sync_array","transaction","tx","executeSql","results","create_sub_array","rows","_array","data","event_data","i","length","get_supplier_array","suppliers_data","supps","push","console","log","event_id","Promise","resolve","reject","_","state","supplier_array","visible","sync_popup","modalvisibility","setModalVisible","styles","startbutton","color","fontSize","StyleSheet","create","backgroundColor","padding","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    View, Text, Modal, ScrollView, StyleSheet, TouchableOpacity\r\n} from 'react-native';\r\n\r\n\r\n////////////////////SQLLITE CONNECTION\r\nimport { SQLite } from 'expo-sqlite';\r\nconst db = SQLite.openDatabase('db.db');\r\n//////////////////////////////////////\r\n\r\nexport default class Sync_model extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: '',\r\n            supplier_array: []\r\n        };\r\n    }\r\n\r\n    setModalVisible(visible) {\r\n        this.props.sync_popup(visible);\r\n    }\r\n\r\n    create_sync_array = () => {\r\n\r\n        db.transaction((tx) => {\r\n            tx.executeSql('SELECT * from events', [], (tx, results) => {\r\n\r\n                this.create_sub_array(results.rows._array);\r\n\r\n            });\r\n\r\n\r\n        });\r\n    }\r\n\r\n\r\n    create_sub_array = async (data) => {\r\n\r\n        var event_data = [];\r\n        for (var i = 0; i < data.length; i++) {\r\n\r\n            var suppliers_data = await this.get_supplier_array(data[i]['event_id']);\r\n            data[i]['suppliers'] = suppliers_data.supps;\r\n            event_data.push(data[i])\r\n        }\r\n\r\n        console.log(event_data);\r\n    }\r\n\r\n    get_supplier_array = async (event_id) => {\r\n        let supps = [];\r\n        return new Promise((resolve, reject) => {\r\n            db.transaction(\r\n                tx => {\r\n                    tx.executeSql('SELECT * from suppliers where event_id = ?', [event_id], (_, { rows }) => {\r\n                        supps.push(rows._array);\r\n                        resolve({ supps });\r\n                    });\r\n                }, null, null);\r\n        });\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <View>\r\n                <Modal\r\n                    animationType=\"slide\"\r\n                    transparent={false}\r\n                    visible={this.props.modalvisibility}\r\n                    onRequestClose={() => {\r\n                        this.setModalVisible(false)\r\n                    }}>\r\n\r\n\r\n                    <View>\r\n                        <TouchableOpacity style={styles.startbutton} onPress={() => { this.create_sync_array() }} >\r\n                            <Text style={{ color: \"#fff\", fontSize: 40 }}>\r\n                                Start\r\n                            </Text>\r\n                        </TouchableOpacity>\r\n\r\n                        <Text>\r\n                            {console.log(this.state.data)}\r\n                        </Text>\r\n                    </View>\r\n\r\n                </Modal>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    startbutton: {\r\n        backgroundColor: 'black',\r\n        padding: 10,\r\n        width: 200\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}