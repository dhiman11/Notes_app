{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"D:\\\\Notes_app\\\\Pages\\\\modals\\\\Sync_model.js\";\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { SQLite } from 'expo-sqlite';\nvar db = SQLite.openDatabase('db.db');\n\nvar Sync_model = function (_Component) {\n  _inherits(Sync_model, _Component);\n\n  function Sync_model(props) {\n    var _this;\n\n    _classCallCheck(this, Sync_model);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Sync_model).call(this, props));\n\n    _this.create_sync_array = function () {\n      db.transaction(function (tx) {\n        tx.executeSql('SELECT * from events', [], function (tx, results) {\n          _this.create_sub_array(results.rows._array);\n        });\n      });\n    };\n\n    _this.create_sub_array = function _callee(data) {\n      var event_data, i, suppliers_data;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event_data = [];\n              i = 0;\n\n            case 2:\n              if (!(i < data.length)) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(_this.get_supplier_array(data[i]['event_id']));\n\n            case 5:\n              suppliers_data = _context.sent;\n              data[i]['suppliers'] = suppliers_data.supps;\n              event_data.push(data[i]);\n\n            case 8:\n              i++;\n              _context.next = 2;\n              break;\n\n            case 11:\n              console.log(event_data);\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    _this.get_supplier_array = function _callee2(event_id) {\n      var supps;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              supps = [];\n              return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                db.transaction(function (tx) {\n                  tx.executeSql('SELECT * from suppliers where event_id = ?', [event_id], function (_, _ref) {\n                    var rows = _ref.rows;\n                    supps.push(rows._array);\n                    resolve({\n                      supps: supps\n                    });\n                  });\n                }, null, null);\n              }));\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    };\n\n    _this.state = {\n      data: '',\n      supplier_array: []\n    };\n    return _this;\n  }\n\n  _createClass(Sync_model, [{\n    key: \"setModalVisible\",\n    value: function setModalVisible(visible) {\n      this.props.sync_popup(visible);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        }\n      }, React.createElement(Modal, {\n        animationType: \"slide\",\n        transparent: false,\n        visible: this.props.modalvisibility,\n        onRequestClose: function onRequestClose() {\n          _this2.setModalVisible(false);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        }\n      }, React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        }\n      }, React.createElement(TouchableOpacity, {\n        style: styles.startbutton,\n        onPress: function onPress() {\n          _this2.create_sync_array();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: \"#fff\",\n          fontSize: 40\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        }\n      }, \"Start\")), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        }\n      }, console.log(this.state.data)))));\n    }\n  }]);\n\n  return Sync_model;\n}(Component);\n\nexport { Sync_model as default };\nvar styles = StyleSheet.create({\n  startbutton: {\n    backgroundColor: 'black',\n    padding: 10,\n    width: 200\n  }\n});","map":{"version":3,"sources":["D:/Notes_app/Pages/modals/Sync_model.js"],"names":["React","Component","SQLite","db","openDatabase","Sync_model","props","create_sync_array","transaction","tx","executeSql","results","create_sub_array","rows","_array","data","event_data","i","length","get_supplier_array","suppliers_data","supps","push","console","log","event_id","Promise","resolve","reject","_","state","supplier_array","visible","sync_popup","modalvisibility","setModalVisible","styles","startbutton","color","fontSize","StyleSheet","create","backgroundColor","padding","width"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    View, Text, Modal, ScrollView, StyleSheet, TouchableOpacity\r\n} from 'react-native';\r\n\r\n\r\n////////////////////SQLLITE CONNECTION\r\nimport { SQLite } from 'expo-sqlite';\r\nconst db = SQLite.openDatabase('db.db');\r\n//////////////////////////////////////\r\n\r\nexport default class Sync_model extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: '',\r\n            supplier_array: []\r\n        };\r\n    }\r\n\r\n    setModalVisible(visible) {\r\n        this.props.sync_popup(visible);\r\n    }\r\n\r\n    create_sync_array = () => {\r\n\r\n        db.transaction((tx) => {\r\n            tx.executeSql('SELECT * from events', [], (tx, results) => {\r\n\r\n                this.create_sub_array(results.rows._array);\r\n\r\n            });\r\n\r\n\r\n        });\r\n    }\r\n\r\n\r\n    create_sub_array = async (data) => {\r\n\r\n        var event_data = [];\r\n        for (var i = 0; i < data.length; i++) {\r\n\r\n            var suppliers_data = await this.get_supplier_array(data[i]['event_id']);\r\n            data[i]['suppliers'] = suppliers_data.supps;\r\n            event_data.push(data[i])\r\n        }\r\n\r\n        console.log(event_data);\r\n    }\r\n\r\n    get_supplier_array = async (event_id) => {\r\n        let supps = [];\r\n        return new Promise((resolve, reject) => {\r\n            db.transaction(\r\n                tx => {\r\n                    tx.executeSql('SELECT * from suppliers where event_id = ?', [event_id], (_, { rows }) => {\r\n                        supps.push(rows._array);\r\n                        resolve({ supps });\r\n                    });\r\n                }, null, null);\r\n        });\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <View>\r\n                <Modal\r\n                    animationType=\"slide\"\r\n                    transparent={false}\r\n                    visible={this.props.modalvisibility}\r\n                    onRequestClose={() => {\r\n                        this.setModalVisible(false)\r\n                    }}>\r\n\r\n\r\n                    <View>\r\n                        <TouchableOpacity style={styles.startbutton} onPress={() => { this.create_sync_array() }} >\r\n                            <Text style={{ color: \"#fff\", fontSize: 40 }}>\r\n                                Start\r\n                            </Text>\r\n                        </TouchableOpacity>\r\n\r\n                        <Text>\r\n                            {console.log(this.state.data)}\r\n                        </Text>\r\n                    </View>\r\n\r\n                </Modal>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    startbutton: {\r\n        backgroundColor: 'black',\r\n        padding: 10,\r\n        width: 200\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}