{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"D:\\\\Notes_app\\\\Pages\\\\edit_note\\\\Edit_contact.js\";\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport PixelRatio from \"react-native-web/dist/exports/PixelRatio\";\nimport { SQLite } from 'expo-sqlite';\nimport Image_slider from \"./Image_slider\";\nimport { load_contacts } from \"../models/all_models\";\nvar db = SQLite.openDatabase('db.db');\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nimport { Ionicons } from '@expo/vector-icons';\n\nvar Edit_contact = function (_Component) {\n  _inherits(Edit_contact, _Component);\n\n  function Edit_contact(props) {\n    var _this;\n\n    _classCallCheck(this, Edit_contact);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Edit_contact).call(this, props));\n\n    _this.componentDidMount = function _callee() {\n      var params, contact_id;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              params = _this.props.navigation.state.params;\n              contact_id = params['contact_id'];\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(_this.get_data(contact_id));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    _this.process_data = function _callee2(rows, type) {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(type == \"contact\")) {\n                _context2.next = 5;\n                break;\n              }\n\n              console.log(rows);\n              contacts = rows[0];\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(_this.setState({\n                contact_name: contacts.contact_name,\n                email: contacts.email,\n                phone: contacts.phone,\n                position: contacts.position,\n                notes: contacts.note,\n                contacts_photos: contacts.images,\n                loadingmore: false\n              }));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    };\n\n    _this.get_data = function _callee3(contact_id) {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(load_contacts(0, 0, contact_id).then(function (response) {\n                var data = JSON.parse(response);\n\n                _this.process_data(data['data'], 'contact');\n              }));\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    };\n\n    _this.go_supp_page = function () {\n      _this.props.navigation.goBack(null);\n    };\n\n    _this.state = {\n      contacts_data: [],\n      contacts_photos: [],\n      loadingmore: false,\n      contact_name: '',\n      email: '',\n      phone: '',\n      position: '',\n      notes: ''\n    };\n    return _this;\n  }\n\n  _createClass(Edit_contact, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(ScrollView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        }\n      }, React.createElement(View, {\n        style: {\n          backgroundColor: \"#00000096\",\n          position: \"absolute\",\n          zIndex: 999,\n          paddingLeft: 20,\n          paddingRight: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          _this2.go_supp_page();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        }\n      }, React.createElement(Ionicons, {\n        name: \"md-arrow-round-back\",\n        size: 40,\n        style: {\n          color: \"#b9b9b9\",\n          marginRight: 10,\n          opacity: 0.8\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        }\n      }))), React.createElement(Image_slider, {\n        style: {\n          marginBottom: 30\n        },\n        Images_data: this.state.contacts_photos,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        }\n      }), React.createElement(TextInput, {\n        value: String(this.state.contact_name),\n        style: {\n          position: \"absolute\",\n          top: 300,\n          fontSize: 28,\n          fontWeight: \"bold\",\n          color: \"#fff\",\n          paddingLeft: 10\n        },\n        textAlign: \"left\",\n        onChangeText: function onChangeText(text) {\n          return _this2.setState({\n            contact_name: text\n          });\n        },\n        placeholderTextColor: \"#818181\",\n        placeholder: \"Contact Name*\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        }\n      }), React.createElement(View, {\n        style: styles.input_container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        }\n      }, React.createElement(Text, {\n        style: styles.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        }\n      }, \"Position\"), React.createElement(TextInput, {\n        value: String(this.state.position),\n        style: styles.inputfields,\n        textAlign: \"left\",\n        keyboardType: \"phone-pad\",\n        onChangeText: function onChangeText(text) {\n          return _this2.setState({\n            position: text\n          });\n        },\n        placeholderTextColor: \"#818181\",\n        placeholder: \"Position\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        }\n      }), React.createElement(Text, {\n        style: styles.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        }\n      }, \"Phone\"), React.createElement(TextInput, {\n        value: String(this.state.phone),\n        style: styles.inputfields,\n        textAlign: \"left\",\n        keyboardType: \"phone-pad\",\n        onChangeText: function onChangeText(text) {\n          return _this2.setState({\n            phone: text\n          });\n        },\n        placeholderTextColor: \"#818181\",\n        placeholder: \"Phone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        }\n      }), React.createElement(Text, {\n        style: styles.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        }\n      }, \"Email\"), React.createElement(TextInput, {\n        value: String(this.state.email),\n        multiline: true,\n        style: styles.inputfields,\n        textAlign: \"left\",\n        onChangeText: function onChangeText(text) {\n          return _this2.setState({\n            email: text\n          });\n        },\n        placeholderTextColor: \"#818181\",\n        placeholder: \"Note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        }\n      }), React.createElement(Text, {\n        style: styles.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        }\n      }, \"Notes\"), React.createElement(TextInput, {\n        value: String(this.state.notes),\n        multiline: true,\n        style: styles.inputfields,\n        textAlign: \"left\",\n        onChangeText: function onChangeText(text) {\n          return _this2.setState({\n            notes: text\n          });\n        },\n        placeholderTextColor: \"#818181\",\n        placeholder: \"Note\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        }\n      }), React.createElement(Text, {\n        style: styles.label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        }\n      }, \"All Images\"), this.state.contacts_photos.map(function (item, index) {\n        return React.createElement(View, {\n          key: index,\n          style: styles.bulk_images,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          }\n        }, React.createElement(Image, {\n          style: _this2.state.zoomimage ? styles.zoom_images : styles.images,\n          source: {\n            uri: item.src\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          }\n        }));\n      })));\n    }\n  }]);\n\n  return Edit_contact;\n}(Component);\n\nexport { Edit_contact as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    margin: 20,\n    backgroundColor: '#fff'\n  },\n  buttons: {\n    alignItems: \"flex-end\",\n    textAlign: \"center\",\n    marginTop: 5,\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  },\n  add_supp: {\n    backgroundColor: '#176fc1',\n    paddingLeft: 10,\n    paddingTop: 10,\n    paddingBottom: 10,\n    minWidth: 130,\n    maxWidth: 130\n  },\n  button: {\n    width: '20%'\n  },\n  label: {\n    fontWeight: \"bold\",\n    marginTop: 10\n  },\n  inputfields: {\n    alignSelf: 'stretch',\n    opacity: 0.4,\n    fontSize: 18,\n    backgroundColor: \"#fff\",\n    maxHeight: 40,\n    minWidth: 300,\n    borderColor: \"#fff\",\n    borderWidth: 1\n  },\n  response: {\n    fontSize: 20,\n    color: \"red\",\n    marginBottom: 0\n  },\n  heading: {\n    fontSize: 18,\n    fontWeight: \"normal\",\n    borderColor: \"#176fc1\",\n    borderWidth: 1,\n    backgroundColor: \"#176fc1\",\n    color: \"#fff\",\n    padding: 5,\n    marginBottom: 10\n  },\n  camera: {\n    flex: 1,\n    justifyContent: 'space-between'\n  },\n  input_container: {\n    paddingLeft: 10,\n    paddingRight: 10\n  },\n  images: {\n    width: width - 20,\n    height: 350\n  },\n  zoom_images: {\n    width: width - 20,\n    height: height\n  },\n  bulk_images: {\n    marginBottom: 10\n  }\n});","map":{"version":3,"sources":["D:/Notes_app/Pages/edit_note/Edit_contact.js"],"names":["React","Component","SQLite","Image_slider","load_contacts","db","openDatabase","Dimensions","get","width","height","Ionicons","Edit_contact","props","componentDidMount","params","navigation","state","contact_id","get_data","process_data","rows","type","console","log","contacts","setState","contact_name","email","phone","position","notes","note","contacts_photos","images","loadingmore","then","response","data","JSON","parse","go_supp_page","goBack","contacts_data","backgroundColor","zIndex","paddingLeft","paddingRight","color","marginRight","opacity","marginBottom","String","top","fontSize","fontWeight","text","styles","input_container","label","inputfields","map","item","index","bulk_images","zoomimage","zoom_images","uri","src","StyleSheet","create","container","flex","margin","buttons","alignItems","textAlign","marginTop","flexDirection","flexWrap","add_supp","paddingTop","paddingBottom","minWidth","maxWidth","button","alignSelf","maxHeight","borderColor","borderWidth","heading","padding","camera","justifyContent"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;;;;;AAGA,SAASC,MAAT,QAAuB,aAAvB;AACA,OAAOC,YAAP;AACA,SAASC,aAAT;AACA,IAAMC,EAAE,GAAGH,MAAM,CAACI,YAAP,CAAoB,OAApB,CAAX;;sBAC0BC,UAAU,CAACC,GAAX,CAAe,QAAf,C;IAAlBC,K,mBAAAA,K;IAAOC,M,mBAAAA,M;;AACf,SAASC,QAAT,QAAyB,oBAAzB;;IAGqBC,Y;;;AACjB,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,sFAAMA,KAAN;;AADe,UAenBC,iBAfmB,GAeC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZC,cAAAA,MAFY,GAEH,MAAKF,KAAL,CAAWG,UAAX,CAAsBC,KAAtB,CAA4BF,MAFzB;AAGZG,cAAAA,UAHY,GAGCH,MAAM,CAAC,YAAD,CAHP;AAAA;AAAA,+CAKV,MAAKI,QAAL,CAAcD,UAAd,CALU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAfD;;AAAA,UA0BnBE,YA1BmB,GA0BJ,kBAAOC,IAAP,EAAaC,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA,oBACPA,IAAI,IAAI,SADD;AAAA;AAAA;AAAA;;AAEPC,cAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAI,cAAAA,QAAQ,GAAGJ,IAAI,CAAC,CAAD,CAAf;AAHO;AAAA,+CAID,MAAKK,QAAL,CAAc;AAChBC,gBAAAA,YAAY,EAAEF,QAAQ,CAACE,YADP;AAEhBC,gBAAAA,KAAK,EAAEH,QAAQ,CAACG,KAFA;AAGhBC,gBAAAA,KAAK,EAAEJ,QAAQ,CAACI,KAHA;AAIhBC,gBAAAA,QAAQ,EAAEL,QAAQ,CAACK,QAJH;AAKhBC,gBAAAA,KAAK,EAAEN,QAAQ,CAACO,IALA;AAMhBC,gBAAAA,eAAe,EAAER,QAAQ,CAACS,MANV;AAOhBC,gBAAAA,WAAW,EAAE;AAPG,eAAd,CAJC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA1BI;;AAAA,UAiDnBhB,QAjDmB,GAiDR,kBAAOD,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACDd,aAAa,CAAC,CAAD,EAAI,CAAJ,EAAOc,UAAP,CAAb,CAAgCkB,IAAhC,CAAqC,UAACC,QAAD,EAAc;AACrD,oBAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,QAAX,CAAX;;AACA,sBAAKjB,YAAL,CAAkBkB,IAAI,CAAC,MAAD,CAAtB,EAAgC,SAAhC;AACH,eAHK,CADC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjDQ;;AAAA,UA2DnBG,YA3DmB,GA2DN,YAAI;AACb,YAAK5B,KAAL,CAAWG,UAAX,CAAsB0B,MAAtB,CAA6B,IAA7B;AACH,KA7DkB;;AAEf,UAAKzB,KAAL,GAAa;AACT0B,MAAAA,aAAa,EAAE,EADN;AAETV,MAAAA,eAAe,EAAE,EAFR;AAGTE,MAAAA,WAAW,EAAE,KAHJ;AAITR,MAAAA,YAAY,EAAE,EAJL;AAKTC,MAAAA,KAAK,EAAE,EALE;AAMTC,MAAAA,KAAK,EAAE,EANE;AAOTC,MAAAA,QAAQ,EAAE,EAPD;AAQTC,MAAAA,KAAK,EAAE;AARE,KAAb;AAFe;AAalB;;;;6BAmDQ;AAAA;;AACL,aACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEa,UAAAA,eAAe,EAAE,WAAnB;AAAgCd,UAAAA,QAAQ,EAAE,UAA1C;AAAsDe,UAAAA,MAAM,EAAE,GAA9D;AAAmEC,UAAAA,WAAW,EAAE,EAAhF;AAAoFC,UAAAA,YAAY,EAAE;AAAlG,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE,mBAAM;AAAE,UAAA,MAAI,CAACN,YAAL;AAAqB,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAC,qBAAf;AAAqC,QAAA,IAAI,EAAE,EAA3C;AAA+C,QAAA,KAAK,EAAE;AAAEO,UAAAA,KAAK,EAAE,SAAT;AAAoBC,UAAAA,WAAW,EAAE,EAAjC;AAAqCC,UAAAA,OAAO,EAAE;AAA9C,SAAtD;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,CADJ,EAMI,oBAAC,YAAD;AAAc,QAAA,KAAK,EAAE;AAAEC,UAAAA,YAAY,EAAE;AAAhB,SAArB;AAA2C,QAAA,WAAW,EAAE,KAAKlC,KAAL,CAAWgB,eAAnE;AAAA;AAAA;AAAA;AAAA;AAAA,QANJ,EAQI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAEmB,MAAM,CAAC,KAAKnC,KAAL,CAAWU,YAAZ,CADjB;AAEI,QAAA,KAAK,EAAE;AAAEG,UAAAA,QAAQ,EAAE,UAAZ;AAAwBuB,UAAAA,GAAG,EAAE,GAA7B;AAAkCC,UAAAA,QAAQ,EAAE,EAA5C;AAAgDC,UAAAA,UAAU,EAAE,MAA5D;AAAoEP,UAAAA,KAAK,EAAE,MAA3E;AAAmFF,UAAAA,WAAW,EAAE;AAAhG,SAFX;AAGI,QAAA,SAAS,EAAC,MAHd;AAKI,QAAA,YAAY,EAAE,sBAACU,IAAD;AAAA,iBAAU,MAAI,CAAC9B,QAAL,CAAc;AAAEC,YAAAA,YAAY,EAAE6B;AAAhB,WAAd,CAAV;AAAA,SALlB;AAMI,QAAA,oBAAoB,EAAC,SANzB;AAOI,QAAA,WAAW,EAAC,eAPhB;AAAA;AAAA;AAAA;AAAA;AAAA,QARJ,EAmBI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAACE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,EAII,oBAAC,SAAD;AACI,QAAA,KAAK,EAAEP,MAAM,CAAC,KAAKnC,KAAL,CAAWa,QAAZ,CADjB;AAEI,QAAA,KAAK,EAAE2B,MAAM,CAACG,WAFlB;AAGI,QAAA,SAAS,EAAC,MAHd;AAII,QAAA,YAAY,EAAC,WAJjB;AAKI,QAAA,YAAY,EAAE,sBAACJ,IAAD;AAAA,iBAAU,MAAI,CAAC9B,QAAL,CAAc;AAAEI,YAAAA,QAAQ,EAAE0B;AAAZ,WAAd,CAAV;AAAA,SALlB;AAMI,QAAA,oBAAoB,EAAC,SANzB;AAOI,QAAA,WAAW,EAAC,UAPhB;AAAA;AAAA;AAAA;AAAA;AAAA,QAJJ,EAeI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA,iBAfJ,EAgBI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAEP,MAAM,CAAC,KAAKnC,KAAL,CAAWY,KAAZ,CADjB;AAEI,QAAA,KAAK,EAAE4B,MAAM,CAACG,WAFlB;AAGI,QAAA,SAAS,EAAC,MAHd;AAII,QAAA,YAAY,EAAC,WAJjB;AAKI,QAAA,YAAY,EAAE,sBAACJ,IAAD;AAAA,iBAAU,MAAI,CAAC9B,QAAL,CAAc;AAAEG,YAAAA,KAAK,EAAE2B;AAAT,WAAd,CAAV;AAAA,SALlB;AAMI,QAAA,oBAAoB,EAAC,SANzB;AAOI,QAAA,WAAW,EAAC,OAPhB;AAAA;AAAA;AAAA;AAAA;AAAA,QAhBJ,EA2BI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA,iBA3BJ,EA4BI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAEP,MAAM,CAAC,KAAKnC,KAAL,CAAWW,KAAZ,CADjB;AAEI,QAAA,SAAS,EAAE,IAFf;AAGI,QAAA,KAAK,EAAE6B,MAAM,CAACG,WAHlB;AAII,QAAA,SAAS,EAAC,MAJd;AAKI,QAAA,YAAY,EAAE,sBAACJ,IAAD;AAAA,iBAAU,MAAI,CAAC9B,QAAL,CAAc;AAAEE,YAAAA,KAAK,EAAE4B;AAAT,WAAd,CAAV;AAAA,SALlB;AAMI,QAAA,oBAAoB,EAAC,SANzB;AAOI,QAAA,WAAW,EAAC,MAPhB;AAAA;AAAA;AAAA;AAAA;AAAA,QA5BJ,EAuCI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA,iBAvCJ,EAwCI,oBAAC,SAAD;AACI,QAAA,KAAK,EAAEP,MAAM,CAAC,KAAKnC,KAAL,CAAWc,KAAZ,CADjB;AAEI,QAAA,SAAS,EAAE,IAFf;AAGI,QAAA,KAAK,EAAE0B,MAAM,CAACG,WAHlB;AAII,QAAA,SAAS,EAAC,MAJd;AAKI,QAAA,YAAY,EAAE,sBAACJ,IAAD;AAAA,iBAAU,MAAI,CAAC9B,QAAL,CAAc;AAAEK,YAAAA,KAAK,EAAEyB;AAAT,WAAd,CAAV;AAAA,SALlB;AAMI,QAAA,oBAAoB,EAAC,SANzB;AAOI,QAAA,WAAW,EAAC,MAPhB;AAAA;AAAA;AAAA;AAAA;AAAA,QAxCJ,EAsDI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA,sBAtDJ,EA0DQ,KAAK1C,KAAL,CAAWgB,eAAX,CAA2B4B,GAA3B,CAA+B,UAACC,IAAD,EAAOC,KAAP;AAAA,eAC3B,oBAAC,IAAD;AAAM,UAAA,GAAG,EAAEA,KAAX;AAAkB,UAAA,KAAK,EAAEN,MAAM,CAACO,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,WACI,oBAAC,KAAD;AACI,UAAA,KAAK,EAAE,MAAI,CAAC/C,KAAL,CAAWgD,SAAX,GAAuBR,MAAM,CAACS,WAA9B,GAA4CT,MAAM,CAACvB,MAD9D;AAEI,UAAA,MAAM,EAAE;AAAEiC,YAAAA,GAAG,EAAEL,IAAI,CAACM;AAAZ,WAFZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAD2B;AAAA,OAA/B,CA1DR,CAnBJ,CADJ;AA2FH;;;;EA7JqCnE,S;;SAArBW,Y;AAkKrB,IAAM6C,MAAM,GAAGY,UAAU,CAACC,MAAX,CAAkB;AAC7BC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,MAAM,EAAE,EAFD;AAGP7B,IAAAA,eAAe,EAAE;AAHV,GADkB;AAM7B8B,EAAAA,OAAO,EAAE;AACLC,IAAAA,UAAU,EAAE,UADP;AAELC,IAAAA,SAAS,EAAE,QAFN;AAGLC,IAAAA,SAAS,EAAE,CAHN;AAILC,IAAAA,aAAa,EAAE,KAJV;AAKLC,IAAAA,QAAQ,EAAE;AALL,GANoB;AAc7BC,EAAAA,QAAQ,EAAE;AACNpC,IAAAA,eAAe,EAAE,SADX;AAENE,IAAAA,WAAW,EAAE,EAFP;AAGNmC,IAAAA,UAAU,EAAE,EAHN;AAINC,IAAAA,aAAa,EAAE,EAJT;AAKNC,IAAAA,QAAQ,EAAE,GALJ;AAMNC,IAAAA,QAAQ,EAAE;AANJ,GAdmB;AAuB7BC,EAAAA,MAAM,EAAE;AACJ5E,IAAAA,KAAK,EAAE;AADH,GAvBqB;AA0B7BkD,EAAAA,KAAK,EAAE;AACHJ,IAAAA,UAAU,EAAE,MADT;AAEHsB,IAAAA,SAAS,EAAE;AAFR,GA1BsB;AA8B7BjB,EAAAA,WAAW,EAAE;AACT0B,IAAAA,SAAS,EAAE,SADF;AAETpC,IAAAA,OAAO,EAAE,GAFA;AAGTI,IAAAA,QAAQ,EAAE,EAHD;AAITV,IAAAA,eAAe,EAAE,MAJR;AAKT2C,IAAAA,SAAS,EAAE,EALF;AAMTJ,IAAAA,QAAQ,EAAE,GAND;AAOTK,IAAAA,WAAW,EAAE,MAPJ;AAQTC,IAAAA,WAAW,EAAE;AARJ,GA9BgB;AAyC7BpD,EAAAA,QAAQ,EAAE;AACNiB,IAAAA,QAAQ,EAAE,EADJ;AAENN,IAAAA,KAAK,EAAE,KAFD;AAGNG,IAAAA,YAAY,EAAE;AAHR,GAzCmB;AA8C7BuC,EAAAA,OAAO,EAAE;AACLpC,IAAAA,QAAQ,EAAE,EADL;AAELC,IAAAA,UAAU,EAAE,QAFP;AAGLiC,IAAAA,WAAW,EAAE,SAHR;AAILC,IAAAA,WAAW,EAAE,CAJR;AAKL7C,IAAAA,eAAe,EAAE,SALZ;AAMLI,IAAAA,KAAK,EAAE,MANF;AAOL2C,IAAAA,OAAO,EAAE,CAPJ;AAQLxC,IAAAA,YAAY,EAAE;AART,GA9CoB;AAwD7ByC,EAAAA,MAAM,EAAE;AACJpB,IAAAA,IAAI,EAAE,CADF;AAEJqB,IAAAA,cAAc,EAAE;AAFZ,GAxDqB;AA4D7BnC,EAAAA,eAAe,EAAE;AACbZ,IAAAA,WAAW,EAAE,EADA;AAEbC,IAAAA,YAAY,EAAE;AAFD,GA5DY;AAgE7Bb,EAAAA,MAAM,EAAE;AACJzB,IAAAA,KAAK,EAAEA,KAAK,GAAG,EADX;AAEJC,IAAAA,MAAM,EAAE;AAFJ,GAhEqB;AAoE7BwD,EAAAA,WAAW,EAAE;AACTzD,IAAAA,KAAK,EAAEA,KAAK,GAAG,EADN;AAETC,IAAAA,MAAM,EAAEA;AAFC,GApEgB;AAwE7BsD,EAAAA,WAAW,EAAE;AACTb,IAAAA,YAAY,EAAE;AADL;AAxEgB,CAAlB,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { View, Text, StyleSheet, TextInput, Image, ScrollView,TouchableOpacity } from 'react-native';\r\nimport { Dimensions, PixelRatio } from 'react-native';\r\nimport { SQLite } from 'expo-sqlite';\r\nimport Image_slider from './Image_slider';\r\nimport { load_contacts } from '../models/all_models';\r\nconst db = SQLite.openDatabase('db.db');\r\nconst { width, height } = Dimensions.get('window');\r\nimport { Ionicons } from '@expo/vector-icons';\r\n\r\n\r\nexport default class Edit_contact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            contacts_data: [],\r\n            contacts_photos: [],\r\n            loadingmore: false,\r\n            contact_name: '',\r\n            email: '',\r\n            phone: '',\r\n            position: '',\r\n            notes: ''\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n\r\n        let params = this.props.navigation.state.params;\r\n        let contact_id = params['contact_id'];\r\n\r\n        await this.get_data(contact_id);\r\n\r\n\r\n    }\r\n\r\n\r\n    process_data = async (rows, type) => {\r\n        if (type == \"contact\") {\r\n            console.log(rows);\r\n            contacts = rows[0];\r\n            await this.setState({\r\n                contact_name: contacts.contact_name,\r\n                email: contacts.email,\r\n                phone: contacts.phone,\r\n                position: contacts.position,\r\n                notes: contacts.note,\r\n                contacts_photos: contacts.images,\r\n                loadingmore: false\r\n            })\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    get_data = async (contact_id) => {\r\n        await load_contacts(0, 0, contact_id).then((response) => {\r\n            var data = JSON.parse(response);\r\n            this.process_data(data['data'], 'contact')\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    go_supp_page=()=>{\r\n        this.props.navigation.goBack(null);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <ScrollView>\r\n                <View style={{ backgroundColor: \"#00000096\", position: \"absolute\", zIndex: 999, paddingLeft: 20, paddingRight: 10 }}>\r\n                    <TouchableOpacity onPress={() => { this.go_supp_page() }} >\r\n                        <Ionicons name=\"md-arrow-round-back\" size={40} style={{ color: \"#b9b9b9\", marginRight: 10, opacity: 0.8 }} />\r\n                    </TouchableOpacity>\r\n                </View>\r\n                <Image_slider style={{ marginBottom: 30 }} Images_data={this.state.contacts_photos} />\r\n\r\n                <TextInput\r\n                    value={String(this.state.contact_name)}\r\n                    style={{ position: \"absolute\", top: 300, fontSize: 28, fontWeight: \"bold\", color: \"#fff\", paddingLeft: 10 }}\r\n                    textAlign=\"left\"\r\n                    // autoFocus={true} \r\n                    onChangeText={(text) => this.setState({ contact_name: text })}\r\n                    placeholderTextColor='#818181'\r\n                    placeholder=\"Contact Name*\"\r\n                // ref={component => this._textInput1 = component}\r\n                />\r\n\r\n                <View style={styles.input_container}>\r\n\r\n                    <Text style={styles.label}>Position</Text>\r\n\r\n                    <TextInput\r\n                        value={String(this.state.position)}\r\n                        style={styles.inputfields}\r\n                        textAlign=\"left\"\r\n                        keyboardType=\"phone-pad\"\r\n                        onChangeText={(text) => this.setState({ position: text })}\r\n                        placeholderTextColor='#818181'\r\n                        placeholder=\"Position\"\r\n                    // ref={component => this._textInput1 = component}\r\n                    />\r\n\r\n                    <Text style={styles.label}>Phone</Text>\r\n                    <TextInput\r\n                        value={String(this.state.phone)}\r\n                        style={styles.inputfields}\r\n                        textAlign=\"left\"\r\n                        keyboardType=\"phone-pad\"\r\n                        onChangeText={(text) => this.setState({ phone: text })}\r\n                        placeholderTextColor='#818181'\r\n                        placeholder=\"Phone\"\r\n                    // ref={component => this._textInput1 = component}\r\n                    />\r\n\r\n                    <Text style={styles.label}>Email</Text>\r\n                    <TextInput\r\n                        value={String(this.state.email)}\r\n                        multiline={true}\r\n                        style={styles.inputfields}\r\n                        textAlign=\"left\"\r\n                        onChangeText={(text) => this.setState({ email: text })}\r\n                        placeholderTextColor='#818181'\r\n                        placeholder=\"Note\"\r\n                    // ref={component => this._textInput1 = component}\r\n                    />\r\n\r\n                    <Text style={styles.label}>Notes</Text>\r\n                    <TextInput\r\n                        value={String(this.state.notes)}\r\n                        multiline={true}\r\n                        style={styles.inputfields}\r\n                        textAlign=\"left\"\r\n                        onChangeText={(text) => this.setState({ notes: text })}\r\n                        placeholderTextColor='#818181'\r\n                        placeholder=\"Note\"\r\n                    // ref={component => this._textInput1 = component}\r\n                    />\r\n\r\n\r\n\r\n\r\n                    <Text style={styles.label}>All Images</Text>\r\n\r\n                    {\r\n\r\n                        this.state.contacts_photos.map((item, index) => (\r\n                            <View key={index} style={styles.bulk_images}>\r\n                                <Image\r\n                                    style={this.state.zoomimage ? styles.zoom_images : styles.images}\r\n                                    source={{ uri: item.src }} />\r\n\r\n                            </View>\r\n                        ))\r\n                    }\r\n\r\n                </View>\r\n            </ScrollView>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// define your styles\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        margin: 20,\r\n        backgroundColor: '#fff',\r\n    },\r\n    buttons: {\r\n        alignItems: \"flex-end\",\r\n        textAlign: \"center\",\r\n        marginTop: 5,\r\n        flexDirection: 'row',\r\n        flexWrap: 'wrap',\r\n\r\n    },\r\n    add_supp: {\r\n        backgroundColor: '#176fc1',\r\n        paddingLeft: 10,\r\n        paddingTop: 10,\r\n        paddingBottom: 10,\r\n        minWidth: 130,\r\n        maxWidth: 130,\r\n\r\n    },\r\n    button: {\r\n        width: '20%'\r\n    },\r\n    label: {\r\n        fontWeight: \"bold\",\r\n        marginTop: 10,\r\n    },\r\n    inputfields: {\r\n        alignSelf: 'stretch',\r\n        opacity: 0.4,\r\n        fontSize: 18,\r\n        backgroundColor: \"#fff\",\r\n        maxHeight: 40,\r\n        minWidth: 300,\r\n        borderColor: \"#fff\",\r\n        borderWidth: 1,\r\n\r\n    },\r\n    response: {\r\n        fontSize: 20,\r\n        color: \"red\",\r\n        marginBottom: 0\r\n    },\r\n    heading: {\r\n        fontSize: 18,\r\n        fontWeight: \"normal\",\r\n        borderColor: \"#176fc1\",\r\n        borderWidth: 1,\r\n        backgroundColor: \"#176fc1\",\r\n        color: \"#fff\",\r\n        padding: 5,\r\n        marginBottom: 10\r\n    },\r\n    camera: {\r\n        flex: 1,\r\n        justifyContent: 'space-between',\r\n    },\r\n    input_container: {\r\n        paddingLeft: 10,\r\n        paddingRight: 10\r\n    },\r\n    images: {\r\n        width: width - 20,\r\n        height: 350\r\n    },\r\n    zoom_images: {\r\n        width: width - 20,\r\n        height: height\r\n    },\r\n    bulk_images: {\r\n        marginBottom: 10\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}