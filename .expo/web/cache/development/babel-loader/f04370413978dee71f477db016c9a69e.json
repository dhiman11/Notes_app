{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"D:\\\\Notes_app\\\\Pages\\\\Login.js\";\nimport React, { Component } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { api_name } from \"./Settings\";\n\nvar Login = function (_Component) {\n  _inherits(Login, _Component);\n\n  function Login(props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this, props));\n    _this.state = {\n      username: '',\n      password: '',\n      isLoggedin: false,\n      LoginStatus: ''\n    };\n\n    _this.ifloginalerady = function _callee() {\n      var token, data;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('cookies'));\n\n            case 3:\n              token = _context.sent;\n              data = JSON.parse(token);\n\n              if (data.logged_in) {\n                _this.props.navigation.navigate('App');\n              } else {\n                _this.props.navigation.navigate('Auth');\n              }\n\n              _context.next = 10;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]]);\n    };\n\n    _this.storeData = function _callee2(data) {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('cookies', JSON.stringify(data)));\n\n            case 3:\n              _this.props.navigation.navigate('Home');\n\n              _context2.next = 9;\n              break;\n\n            case 6:\n              _context2.prev = 6;\n              _context2.t0 = _context2[\"catch\"](0);\n\n              _this.props.navigation.navigate('Login');\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 6]]);\n    };\n\n    _this.onLoginPressed = function () {\n      var username = _this.state.username;\n      var password = _this.state.password;\n      fetch(api_name + 'login_now', {\n        method: 'POST',\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          employeeid: username,\n          password: password\n        })\n      }).then(function (response) {\n        return response.json();\n      }).then(function (responseJson) {\n        if (responseJson.result) {\n          _this.storeData(responseJson.cookie_data);\n        }\n      }).catch(function (error) {});\n    };\n\n    _this.ifloginalerady();\n\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      StatusBar.setHidden(true);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.loginpage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        }\n      }, React.createElement(Image, {\n        style: {\n          width: 200,\n          height: 200\n        },\n        source: require(\"../assets/img/logo.png\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        }\n      }), React.createElement(Text, {\n        style: {\n          color: \"red\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        }\n      }, this.state.LoginStatus), React.createElement(TextInput, {\n        style: styles.inputfields,\n        autoCapitalize: \"none\",\n        onSubmitEditing: function onSubmitEditing() {\n          return _this2.passwordInput.focus();\n        },\n        autoCorrect: false,\n        ref: function ref(_ref) {\n          return _this2.username = _ref;\n        },\n        onChangeText: function onChangeText(text) {\n          return _this2.setState({\n            username: text\n          });\n        },\n        keyboardType: \"email-address\",\n        returnKeyType: \"next\",\n        onSubmitEditing: this._submit,\n        textAlign: \"center\",\n        placeholder: \"Username\",\n        placeholderTextColor: \"#818181\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        }\n      }), React.createElement(TextInput, {\n        style: styles.inputfields,\n        returnKeyType: \"go\",\n        ref: function ref(_ref2) {\n          return _this2.password = _ref2;\n        },\n        onChangeText: function onChangeText(text) {\n          return _this2.setState({\n            password: text\n          });\n        },\n        placeholder: \"Password\",\n        textAlign: \"center\",\n        placeholderTextColor: \"#818181\",\n        secureTextEntry: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        }\n      }), React.createElement(View, {\n        style: {\n          alignItems: \"center\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _this2.onLoginPressed();\n        },\n        style: styles.buttons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        }\n      }, React.createElement(Text, {\n        style: styles.login,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        }\n      }, \"LOGIN\"))));\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nvar styles = StyleSheet.create({\n  inputfields: {\n    opacity: 0.4,\n    marginBottom: 15,\n    fontSize: 25,\n    backgroundColor: \"#fff\",\n    minHeight: 60,\n    minWidth: 300,\n    maxWidth: 300,\n    borderColor: \"gray\",\n    borderWidth: 1,\n    paddingLeft: 15\n  },\n  login: {\n    backgroundColor: \"#fff200\",\n    alignItems: \"center\",\n    alignContent: 'center',\n    alignSelf: 'center',\n    color: \"#282525\",\n    fontSize: 16,\n    minWidth: 100,\n    paddingHorizontal: 50,\n    paddingTop: 10,\n    paddingBottom: 10,\n    marginBottom: 20\n  },\n  signup: {\n    backgroundColor: \"green\",\n    color: \"white\",\n    alignItems: \"center\",\n    alignContent: 'center',\n    minWidth: 100,\n    alignSelf: 'center',\n    fontSize: 16,\n    paddingHorizontal: 50,\n    paddingTop: 10,\n    paddingBottom: 10,\n    marginBottom: 15\n  },\n  buttons: {\n    alignItems: \"center\",\n    alignContent: 'center',\n    alignSelf: 'center',\n    minWidth: 200\n  },\n  loginpage: {\n    backgroundColor: \"#176fc1\",\n    paddingTop: 130,\n    alignItems: \"center\",\n    flex: 1,\n    borderTopColor: '#fff200',\n    borderTopWidth: 25\n  },\n  picker: {\n    borderColor: \"gray\",\n    borderWidth: 1\n  }\n});\nexport default Login;","map":{"version":3,"sources":["D:/Notes_app/Pages/Login.js"],"names":["React","Component","api_name","Login","props","state","username","password","isLoggedin","LoginStatus","ifloginalerady","AsyncStorage","getItem","token","data","JSON","parse","logged_in","navigation","navigate","storeData","setItem","stringify","onLoginPressed","fetch","method","headers","Accept","body","employeeid","then","response","json","responseJson","result","cookie_data","catch","error","StatusBar","setHidden","styles","loginpage","width","height","require","color","inputfields","passwordInput","focus","ref","text","setState","_submit","alignItems","buttons","login","StyleSheet","create","opacity","marginBottom","fontSize","backgroundColor","minHeight","minWidth","maxWidth","borderColor","borderWidth","paddingLeft","alignContent","alignSelf","paddingHorizontal","paddingTop","paddingBottom","signup","flex","borderTopColor","borderTopWidth","picker"],"mappings":"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","sourcesContent":["//import liraries\r\nimport React, { Component } from 'react';\r\nimport { Image,View, Text, StyleSheet,TextInput,TouchableOpacity,StatusBar,AsyncStorage } from 'react-native';\r\nimport { api_name } from './Settings';\r\n \r\n \r\n\r\n// create a component\r\nclass Login extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.ifloginalerady();\r\n    }\r\n\r\n    componentDidMount() {\r\n        StatusBar.setHidden(true);\r\n     }\r\n\r\n    state = { \r\n        username: '',\r\n        password: '' ,\r\n        isLoggedin: false,\r\n        LoginStatus: '', \r\n      };\r\n\r\n      ifloginalerady = async()=>{\r\n          try {\r\n                let  token  =  await AsyncStorage.getItem('cookies');\r\n                let data  = JSON.parse(token);\r\n                if(data.logged_in){\r\n                this.props.navigation.navigate('App');\r\n                }else{\r\n                this.props.navigation.navigate('Auth');\r\n                }\r\n\r\n          } catch (error) {\r\n              \r\n          }\r\n      }\r\n\r\n      storeData = async (data) => {\r\n      \r\n        try {\r\n          await AsyncStorage.setItem('cookies', JSON.stringify(data));\r\n          this.props.navigation.navigate('Home');\r\n        } catch (e) {\r\n            this.props.navigation.navigate('Login');\r\n        }\r\n      }\r\n\r\n \r\n\r\n    onLoginPressed = () => { \r\n           \r\n        // alert(this.state.username);\r\n         let username = this.state.username;\r\n         let password = this.state.password;\r\n        \r\n       \r\n         fetch(api_name+'login_now', {\r\n             method: 'POST',\r\n             headers: {\r\n                 Accept: 'application/json',\r\n                 'Content-Type': 'application/json',\r\n             }, \r\n             body: JSON.stringify({\r\n                 employeeid:username,\r\n                 password:password,\r\n             }),\r\n             }).then((response) => response.json())\r\n             .then((responseJson) => { \r\n                  if (responseJson.result){   \r\n                    this.storeData(responseJson.cookie_data); \r\n                  }\r\n                \r\n               \r\n             })\r\n             .catch((error) => {\r\n              // console.error(error);\r\n             });\r\n         }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n              \r\n                <View style={styles.loginpage}> \r\n                        <Image \r\n                            style ={{width:200,height:200}}\r\n                             source={require('../assets/img/logo.png')}\r\n                        />\r\n\r\n                        <Text style={{color:\"red\"}}>{this.state.LoginStatus}</Text>\r\n                        <TextInput  \r\n                        style={styles.inputfields}\r\n                        // onChangeText={(text) => this.setState({text})} \r\n                        autoCapitalize=\"none\" \r\n                        onSubmitEditing={() => this.passwordInput.focus()} \r\n                        autoCorrect={false} \r\n                        ref={(ref)=> this.username = ref} \r\n                        onChangeText={(text) => this.setState({username:text})}\r\n                        keyboardType='email-address' \r\n                        returnKeyType=\"next\" \r\n                        onSubmitEditing={this._submit}\r\n                        textAlign=\"center\"\r\n                        placeholder='Username' \r\n                        placeholderTextColor='#818181'\r\n                        />\r\n\r\n                        <TextInput \r\n                        style={styles.inputfields}\r\n                        // onChangeText={(text) => this.setState({text})}\r\n                        returnKeyType=\"go\" \r\n                        ref={(ref)=> this.password = ref} \r\n                        onChangeText={(text) => this.setState({password:text})}\r\n                        placeholder='Password' \r\n                        textAlign=\"center\"\r\n                        placeholderTextColor='#818181' \r\n                        secureTextEntry\r\n                        />\r\n\r\n                        <View style={{alignItems:\"center\"}}>\r\n                            <TouchableOpacity onPress = {() => this.onLoginPressed()}  style={styles.buttons}>\r\n                            <Text   style={styles.login}>LOGIN</Text>\r\n                            </TouchableOpacity>\r\n \r\n\r\n                        </View>\r\n                    </View>\r\n             \r\n\r\n            \r\n        );\r\n    }\r\n}\r\n\r\n// define your styles\r\n// define your styles\r\nconst styles = StyleSheet.create({\r\n \r\n    inputfields:{\r\n        opacity:0.4,\r\n        marginBottom: 15,\r\n        fontSize:25,\r\n        backgroundColor:\"#fff\",  \r\n        minHeight: 60,\r\n        minWidth: 300,  \r\n        maxWidth: 300,\r\n        borderColor: \"gray\",\r\n        borderWidth: 1,\r\n        paddingLeft:15\r\n    },\r\n    login:{\r\n        backgroundColor:\"#fff200\",  \r\n        alignItems:\"center\",\r\n        alignContent: 'center',\r\n        alignSelf: 'center',\r\n        color:\"#282525\",\r\n        fontSize: 16,\r\n        minWidth:100, \r\n        paddingHorizontal: 50, \r\n        paddingTop: 10,\r\n        paddingBottom: 10,\r\n        marginBottom:20 ,\r\n      \r\n    },\r\n    signup:{\r\n        backgroundColor:\"green\", \r\n        color:\"white\",\r\n        alignItems:\"center\",\r\n        alignContent: 'center',\r\n        minWidth:100, \r\n        alignSelf: 'center',\r\n        fontSize: 16,\r\n        paddingHorizontal: 50, \r\n        paddingTop: 10,\r\n        paddingBottom: 10,\r\n        marginBottom:15  ,\r\n       \r\n    },\r\n    buttons:{ \r\n        alignItems:\"center\",\r\n        alignContent: 'center',\r\n        alignSelf: 'center', \r\n        minWidth:200, \r\n    },\r\n   loginpage:{\r\n        backgroundColor:\"#176fc1\", \r\n        paddingTop:130,\r\n        alignItems:\"center\",\r\n        flex:1,\r\n        borderTopColor: '#fff200',\r\n        borderTopWidth: 25,\r\n   },\r\n    picker:{\r\n        borderColor:\"gray\",\r\n        borderWidth:1\r\n    }\r\n\r\n\r\n});\r\n\r\n//make this component available to the app\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}